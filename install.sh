#!/bin/bash

# üü¢ X√°c ƒë·ªãnh h·ªá ƒëi·ªÅu h√†nh
echo "üü¢ Ki·ªÉm tra h·ªá ƒëi·ªÅu h√†nh..."
if [ -f /etc/debian_version ]; then
    OS="debian"
elif [ -f /etc/redhat-release ]; then
    OS="redhat"
elif [ -f /etc/SuSE-release ]; then
    OS="suse"
elif [ -f /etc/arch-release ]; then
    OS="arch"
else
    echo "‚ùå H·ªá ƒëi·ªÅu h√†nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£!"
    exit 1
fi

# üü¢ C·∫≠p nh·∫≠t h·ªá th·ªëng v√† c√†i ƒë·∫∑t th∆∞ vi·ªán c·∫ßn thi·∫øt
echo "üü¢ C·∫≠p nh·∫≠t h·ªá th·ªëng..."
case $OS in
    "debian")
        sudo apt update && sudo apt upgrade -y
        sudo apt install wget git python3 python3-venv libgl1 libglib2.0-0 -y
        ;;
    "redhat")
        sudo dnf update -y
        sudo dnf install wget git python3 gperftools-libs libglvnd-glx -y
        ;;
    "suse")
        sudo zypper refresh
        sudo zypper install wget git python3 libtcmalloc4 libglvnd -y
        ;;
    "arch")
        sudo pacman -Syu --noconfirm
        sudo pacman -S wget git python3 --noconfirm
        ;;
esac

# üü¢ Ki·ªÉm tra GPU NVIDIA v√† CUDA
echo "üü¢ Ki·ªÉm tra GPU..."
if command -v nvidia-smi &> /dev/null; then
    CUDA_VERSION=$(nvidia-smi | grep -oP "CUDA Version: \K[\d.]+")
    echo "‚úÖ GPU NVIDIA ph√°t hi·ªán! CUDA ƒë√£ c√†i (Version: $CUDA_VERSION)"
else
    echo "‚ùå Kh√¥ng t√¨m th·∫•y GPU NVIDIA! Tho√°t..."
    exit 1
fi

# üü¢ Clone Stable Diffusion WebUI
echo "üü¢ T·∫£i Stable Diffusion WebUI..."
if [ ! -d "stable-diffusion-webui" ]; then
    git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git
fi
cd stable-diffusion-webui

# üü¢ ƒê·ªãnh nghƒ©a th∆∞ m·ª•c m√¥ h√¨nh
MODEL_DIR="models/Stable-diffusion"
CONTROLNET_DIR="extensions/sd-webui-controlnet/models"
LORA_DIR="models/Lora"
TEMP_MODEL_DIR="/tmp/sd-models"

mkdir -p "$MODEL_DIR" "$CONTROLNET_DIR" "$LORA_DIR" "$TEMP_MODEL_DIR"

# üü¢ T·∫£i m√¥ h√¨nh Realistic Vision V2.0
REALISTIC_MODEL="$TEMP_MODEL_DIR/Realistic_Vision_V2.0.safetensors"
FINAL_MODEL="$MODEL_DIR/Realistic_Vision_V2.0.safetensors"

if [ -f "$REALISTIC_MODEL" ]; then
    echo "‚úÖ M√¥ h√¨nh Realistic Vision ƒë√£ c√≥, ch·ªâ copy sang..."
else
    echo "üü¢ T·∫£i m√¥ h√¨nh Realistic Vision V2.0..."
    wget -O "$REALISTIC_MODEL" "https://huggingface.co/SG161222/Realistic_Vision_V2.0/resolve/main/Realistic_Vision_V2.0.safetensors"
fi
cp "$REALISTIC_MODEL" "$FINAL_MODEL"

# üü¢ T·∫£i m√¥ h√¨nh Stable Diffusion v1.5
SD_MODEL="$TEMP_MODEL_DIR/v1-5-pruned-emaonly.safetensors"
FINAL_SD_MODEL="$MODEL_DIR/v1-5-pruned-emaonly.safetensors"

if [ -f "$SD_MODEL" ]; then
    echo "‚úÖ M√¥ h√¨nh SD 1.5 ƒë√£ c√≥, ch·ªâ copy sang..."
else
    echo "üü¢ T·∫£i m√¥ h√¨nh SD 1.5..."
    wget -O "$SD_MODEL" "https://huggingface.co/runwayml/stable-diffusion-v1-5/resolve/main/v1-5-pruned-emaonly.safetensors"
fi
cp "$SD_MODEL" "$FINAL_SD_MODEL"

# üü¢ T·∫£i ControlNet Models (n·∫øu ch∆∞a c√≥)
CONTROLNET_MODEL="$CONTROLNET_DIR/control_v11p_sd15_canny.pth"
if [ ! -f "$CONTROLNET_MODEL" ]; then
    echo "üü¢ T·∫£i ControlNet Model..."
    wget -O "$CONTROLNET_MODEL" "https://huggingface.co/lllyasviel/ControlNet-v1-1/resolve/main/control_v11p_sd15_canny.pth"
else
    echo "‚úÖ ControlNet Model ƒë√£ c√≥."
fi

# üü¢ T·∫£i LoRA Model (n·∫øu ch∆∞a c√≥)
LORA_MODEL="$LORA_DIR/AnythingV3.safetensors"
if [ ! -f "$LORA_MODEL" ]; then
    echo "üü¢ T·∫£i LoRA Model..."
    wget -O "$LORA_MODEL" "https://huggingface.co/Lykon/LykonLoRA/resolve/main/AnythingV3.safetensors"
else
    echo "‚úÖ LoRA Model ƒë√£ c√≥."
fi

# üü¢ Ch·∫°y WebUI v·ªõi GPU
echo "üü¢ Ch·∫°y Stable Diffusion WebUI..."
python launch.py --xformers --listen --port 7860
